name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.4.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: labo05_db
          MYSQL_USER: labo05
          MYSQL_PASSWORD: labo05
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Install Python dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -uroot -proot --silent; then
              echo "MySQL is ready"
              exit 0
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL did not become ready in time"
          exit 1

      - name: Seed database schema
        run: mysql -h 127.0.0.1 -uroot -proot < db-init/init.sql

      - name: Run tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: "3306"
          DB_NAME: labo05_db
          DB_USER: labo05
          DB_PASSWORD: labo05
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: "6379"
          REDIS_DB: "0"
          PYTHONPATH: src
          PAYMENT_SERVICE_URL: mock
          PAYMENT_PROCESS_URL_TEMPLATE: "http://mock/payments/{payment_id}"
        run: pytest

  deploy:
    needs: tests
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure SSH key
        run: |
          set -e
          mkdir -p ~/.ssh
          key_path="${HOME}/.ssh/store_manager_ci_key"
          echo "${SSH_PRIVATE_KEY}" > "${key_path}"
          chmod 600 "${key_path}"
          {
            echo "Host ${VM_HOST}"
            echo "  HostName ${VM_HOST}"
            echo "  User ${VM_USER}"
            echo "  IdentityFile ${key_path}"
            echo "  StrictHostKeyChecking no"
            echo "  UserKnownHostsFile=/dev/null"
          } >> ~/.ssh/config
          echo "SSH_KEY_PATH=${key_path}" >> "${GITHUB_ENV}"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          VM_HOST: ${{ vars.VM_HOST }}
          VM_USER: ${{ vars.VM_USER }}

      - name: Ensure target directory exists
        run: |
          set -euo pipefail
          port="${VM_PORT:-22}"
          ssh -i "${SSH_KEY_PATH}" -p "${port}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${VM_USER}@${VM_HOST}" "mkdir -p '${VM_TARGET_DIR}'"
        env:
          VM_HOST: ${{ vars.VM_HOST }}
          VM_USER: ${{ vars.VM_USER }}
          VM_PORT: ${{ vars.VM_PORT }}
          VM_TARGET_DIR: ${{ vars.VM_TARGET_DIR }}

      - name: Sync repository to remote host
        run: |
          set -euo pipefail
          port="${VM_PORT:-22}"
          rsync -az --delete \
            -e "ssh -i ${SSH_KEY_PATH} -p ${port} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            --exclude '.git/' \
            --exclude '.github/workflows/' \
            --exclude '__pycache__/' \
            ./ "${VM_USER}@${VM_HOST}:${VM_TARGET_DIR}"
        env:
          VM_HOST: ${{ vars.VM_HOST }}
          VM_USER: ${{ vars.VM_USER }}
          VM_PORT: ${{ vars.VM_PORT }}
          VM_TARGET_DIR: ${{ vars.VM_TARGET_DIR }}
          SSH_KEY_PATH: ${{ env.SSH_KEY_PATH }}

      - name: Restart Docker Compose stack
        shell: bash
        run: |
          set -e
          port="${VM_PORT:-22}"
          project_name="log430-labo5"
          ssh -i "${SSH_KEY_PATH}" -p "${port}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${VM_USER}@${VM_HOST}" "
            set -e
            cd '${VM_TARGET_DIR}'
            docker network inspect labo05-network >/dev/null 2>&1 || docker network create labo05-network
            docker compose --project-name '${project_name}' down --remove-orphans || true
            for cname in prometheus store_manager api-gateway log430-labo5-locust-1 log430-labo5-redis-1 log430-labo5-mysql-1; do
              ids=$(docker ps -aq --filter "name=${cname}")
              if [ -n "${ids}" ]; then
                docker rm -f ${ids} >/dev/null 2>&1 || true
              fi
            done
            docker compose --project-name '${project_name}' up -d --build
          "
        env:
          VM_HOST: ${{ vars.VM_HOST }}
          VM_USER: ${{ vars.VM_USER }}
          VM_PORT: ${{ vars.VM_PORT }}
          VM_TARGET_DIR: ${{ vars.VM_TARGET_DIR }}
          SSH_KEY_PATH: ${{ env.SSH_KEY_PATH }}

      - name: Health checks
        if: vars.VM_HEALTHCHECK_URL != '' || vars.VM_HEALTHCHECK_URLS != ''
        run: |
          set -euo pipefail
          urls="${VM_HEALTHCHECK_URLS:-${VM_HEALTHCHECK_URL}}"
          urls="$(echo "${urls}" | tr '\n' ' ' | tr ',' ' ' | tr ';' ' ')"
          if [ -z "${urls// }" ]; then
            echo "No health check URLs provided; skipping."
            exit 0
          fi
          for endpoint in ${urls}; do
            endpoint="$(echo "${endpoint}" | xargs)"
            [ -z "${endpoint}" ] && continue
            echo "Checking health at ${endpoint}"
            success=false
            for attempt in {1..12}; do
              if curl -fsS "${endpoint}" > /dev/null; then
                echo "  Healthy (${endpoint})"
                success=true
                break
              fi
              echo "  Waiting for ${endpoint}... (${attempt}/12)"
              sleep 5
            done
            if [ "${success}" = false ]; then
              echo "::error::Health check failed for ${endpoint}"
              exit 1
            fi
          done
        env:
          VM_HEALTHCHECK_URL: ${{ vars.VM_HEALTHCHECK_URL }}
          VM_HEALTHCHECK_URLS: ${{ vars.VM_HEALTHCHECK_URLS }}
